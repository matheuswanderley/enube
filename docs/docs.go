// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/data/{field}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Retrieve paginated data from a specified field in the Excel sheet.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "data"
                ],
                "summary": "Get data by field",
                "parameters": [
                    {
                        "enum": [
                            "PartnerId",
                            "PartnerName",
                            "CustomerId",
                            "CustomerName",
                            "CustomerDomainName",
                            "CustomerCountry",
                            "MpnId",
                            "Tier2MpnId",
                            "InvoiceNumber",
                            "ProductId",
                            "SkuId",
                            "AvailabilityId",
                            "SkuName",
                            "ProductName",
                            "PublisherName",
                            "PublisherId",
                            "SubscriptionDescription",
                            "SubscriptionId",
                            "ChargeStartDate",
                            "ChargeEndDate",
                            "UsageDate",
                            "MeterType",
                            "MeterCategory",
                            "MeterId",
                            "MeterSubCategory",
                            "MeterName",
                            "MeterRegion",
                            "Unit",
                            "ResourceLocation",
                            "ConsumedService",
                            "ResourceGroup",
                            "ResourceURI",
                            "ChargeType",
                            "UnitPrice",
                            "Quantity",
                            "UnitType",
                            "BillingPreTaxTotal",
                            "BillingCurrency",
                            "PricingPreTaxTotal",
                            "PricingCurrency",
                            "ServiceInfo1",
                            "ServiceInfo2",
                            "Tags",
                            "AdditionalInfo",
                            "EffectiveUnitPrice",
                            "PCToBCExchangeRate",
                            "PCToBCExchangeRateDate",
                            "EntitlementId",
                            "EntitlementDescription",
                            "PartnerEarnedCreditPercentage",
                            "CreditPercentage",
                            "CreditType",
                            "BenefitOrderId",
                            "BenefitId",
                            "BenefitType"
                        ],
                        "type": "string",
                        "description": "Name of the field to retrieve",
                        "name": "field",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Results per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of field data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid page or limit number",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Field not found or error in processing request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Log in a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Login",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Register",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.RegisterInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controllers.LoginInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controllers.RegisterInput": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
         "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\""
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Excel Data API",
	Description:      "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
